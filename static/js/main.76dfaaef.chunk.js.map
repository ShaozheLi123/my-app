{"version":3,"sources":["components/CardViewer.tsx","components/UserList.tsx","components/ControlPanel.tsx","utilities/data.ts","components/AddCardModal.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CardViewer","card","answerRevealed","Col","Body","Title","Text","question","answer","UserList","users","setUsers","items","onChange","newUsers","LOCAL_STORAGE_USERS","INITIAL_USERS","id","text","ControlPanel","setCard","reveal","showAddCardModal","deck","useState","rawUsers","localStorage","getItem","JSON","parse","getLocalStorageUsers","Button","onClick","Math","floor","random","length","className","shuffledUsers","array","randomIndex","currentIndex","shuffle","setItem","stringify","variant","AddCardModal","visible","setVisible","addCard","setQuestion","setAnswer","hide","Modal","show","onHide","Header","closeButton","Form","Group","controlId","Label","Control","as","rows","value","ev","target","Footer","number","kind","App","CARDS","activeCard","setActiveCard","setDeck","Container","Row","newCard","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.76dfaaef.chunk.js","sourcesContent":["import { Col,  Card as BootstrapCard } from \"react-bootstrap\";\nimport { Card } from \"../interface/card\";\n\nexport function CardViewer({card, answerRevealed}: {card: Card, answerRevealed: boolean}) : JSX.Element{\n    return <Col>\n    <BootstrapCard>\n        <BootstrapCard.Body>\n            <BootstrapCard.Title>Card Viewer</BootstrapCard.Title>\n        <BootstrapCard.Text>\n            <strong>Card Question:</strong> {card.question}\n        </BootstrapCard.Text>\n        {answerRevealed && <BootstrapCard.Text>\n            <strong>Suggested Answer:</strong> {card.answer}\n        </BootstrapCard.Text>}\n        </BootstrapCard.Body>\n    </BootstrapCard>\n    </Col>\n}","import EditableDndList, { Task } from \"editable-dnd-list\";\n\n\nexport function UserList({users, setUsers}: {users: Task[], setUsers: (t: Task[])=>void}): JSX.Element{\n    \n\n    function handleChange (newUsers: Task[]): void{\n        setUsers(newUsers);\n    }\n\n    return <EditableDndList items={users} onChange={handleChange} />;\n}","import {Button, Col} from \"react-bootstrap\";\nimport { Card } from \"../interface/card\";\nimport { getRandomElement, shuffle } from \"../utilities/data\";\nimport { UserList } from \"./UserList\";\nimport { useState } from \"react\";\nimport { Task as User} from \"editable-dnd-list\";\n\nexport const LOCAL_STORAGE_USERS = 'my-app-users';\n\nexport const INITIAL_USERS: User[] = [\n    {id: '1', text: \"Shaozhe\"},\n    {id: '2', text: \"Kaiser\"},\n    {id: '3', text: \"Joe\"},\n  ];\n  \n  export function getLocalStorageUsers(): User[] {\n    let rawUsers: string | null = localStorage.getItem(LOCAL_STORAGE_USERS);\n    if (rawUsers === null) {\n      return [...INITIAL_USERS];\n    } else {\n      return JSON.parse(rawUsers);\n    }\n  }\n\nexport function ControlPanel({setCard, reveal, answerRevealed, showAddCardModal, deck}: \n    {setCard: (c: Card)=>void, reveal: (r:boolean)=>void, answerRevealed: boolean, \n    showAddCardModal: (b: boolean) => void, deck: Card[]}) : JSX.Element{\n        const [users, setUsers] = useState<User[]>(getLocalStorageUsers());\n\n        \n    function setRandomCard(){\n        reveal(false);\n        setCard(getRandomElement(deck))\n    }\n    \n    function shuffleUsers() {\n        let shuffledUsers: User[] = shuffle(users);\n        setUsers([...shuffledUsers]);\n    }\n\n    function save() {\n        localStorage.setItem(LOCAL_STORAGE_USERS, JSON.stringify(users));\n    }\n\n    function addNewCard() {\n        showAddCardModal(true);\n      }\n\n    return <Col>\n    <h1>Control Panel </h1>\n    <UserList users={users} setUsers={setUsers}></UserList>\n    <Button onClick = {setRandomCard} className = \"m-4\">Swap Your Card</Button> \n    <Button onClick = {() => reveal(!answerRevealed)} className = \"m-4\"> Reveal Answer</Button>\n    <Button onClick={shuffleUsers} className=\"m-4\">Shuffle Users</Button>\n    <Button onClick={save} className=\"m-4\" variant=\"success\">Save</Button>\n    <Button onClick={addNewCard} className=\"m-4\">Add new card</Button>\n    </Col>\n}","// https://stackoverflow.com/a/5915122/1718155\n/** *\n* take a random element from a list\n* @para items any kind of list\n* @returns one randomly chosen element\n*/\n\nexport function getRandomElement<T>(items: T[]): T {\n    return items[Math.floor(Math.random()*items.length)];\n}\n\n// https://stackoverflow.com/a/2450976/1718155\n/**\n * Shuffles an array in-place\n * @param array Any array of elements\n * @returns The same array, shuffled (modified in-place)\n */\n export function shuffle<T>(array: T[]): T[] {\n    let currentIndex = array.length,  randomIndex;\n    // While there remain elements to shuffle...\n  while (currentIndex !== 0) {\n\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--;\n\n    // And swap it with the current element.\n    [array[currentIndex], array[randomIndex]] = [\n      array[randomIndex], array[currentIndex]];\n  }\n\n  return array;\n}","import { useState } from \"react\";\nimport { Button, Form, Modal } from \"react-bootstrap\";\nimport { Card } from '../interface/card'\n\nexport function AddCardModal({visible, setVisible, addCard}: \n  {visible: boolean, setVisible: (b: boolean)=>void,\n  addCard: (c: Card) => void}): JSX.Element {\n    const [question, setQuestion] = useState<string>(\"QUESTION TEXT\");\n    const [answer, setAnswer] = useState<string>(\"ANSWER TEXT\");\n\n    function saveCard() {\n      addCard({\n        number: Math.random(),\n        kind: \"Custom\",\n        question, answer\n      });\n      setVisible(false);\n    }\n\n    const hide = () => setVisible(false);\n    return (\n    <Modal show={visible} onHide={hide}>\n      <Modal.Header closeButton>\n        <Modal.Title>Add New Card</Modal.Title>\n      </Modal.Header>\n\n      <Modal.Body>\n      <Form>\n        <Form.Group className=\"mb-3\" controlId=\"addCardForm.questionTextArea\">\n          <Form.Label>Question</Form.Label>\n          <Form.Control as=\"textarea\" rows={3}\n            value={question}\n            onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setQuestion(ev.target.value)}/>\n        </Form.Group>\n        <Form.Group className=\"mb-3\" controlId=\"addCardForm.answerTextArea\">\n          <Form.Label>Suggested Answer</Form.Label>\n          <Form.Control as=\"textarea\" rows={3} \n            value={answer}\n            onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setAnswer(ev.target.value)}/>\n        </Form.Group>\n      </Form>\n      </Modal.Body>\n\n      <Modal.Footer>\n        <Button variant=\"secondary\" onClick={hide}>Close</Button>\n        <Button variant=\"primary\" onClick={saveCard}>Save changes</Button>\n      </Modal.Footer>\n    </Modal>)}","import React, { useState } from 'react';\nimport './App.css';\nimport CARDS from './assets/cards.json';\nimport { CardViewer } from './components/CardViewer';\nimport { ControlPanel } from './components/ControlPanel';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container, Row } from 'react-bootstrap';\nimport {Card} from './interface/card'\nimport { AddCardModal } from './components/AddCardModal';\n\nfunction App(): JSX.Element{\n  const [activeCard, setActiveCard] = useState<Card>(CARDS[0] as Card);\n  const [answerRevealed, reveal] = useState<boolean>(false);\n  const [visible, setVisible] = useState<boolean>(false);\n  const [deck, setDeck] = useState<Card[]>(CARDS);\n\n  function addCard(newCard: Card) {\n    setDeck([...deck, newCard]);\n  }\n\n  return (\n    <Container className=\"App\">\n      <Row>\n      <ControlPanel\n      showAddCardModal={setVisible}\n      deck={deck}\n      setCard={setActiveCard} \n      reveal = {reveal}\n      answerRevealed = {answerRevealed}></ControlPanel>\n      <CardViewer card= {activeCard} answerRevealed = {answerRevealed}></CardViewer>\n      <AddCardModal visible={visible} setVisible={setVisible} addCard={addCard}></AddCardModal>\n      </Row>\n    </Container>\n    \n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}