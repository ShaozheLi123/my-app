{"version":3,"sources":["components/CardViewer.tsx","components/ControlPanel.tsx","utilities/data.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CardViewer","card","Col","Question","ControlPanel","setCard","Button","onClick","items","CARDS","Math","floor","random","length","App","useState","activeCard","setActiveCard","Container","className","Row","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAGO,SAASA,EAAT,GAAwD,IAAnCC,EAAkC,EAAlCA,KACxB,OAAO,eAACC,EAAA,EAAD,WACP,8CACA,iDAAoBD,EAAKE,e,YCAtB,SAASC,EAAT,GAA2E,IAApDC,EAAmD,EAAnDA,QAK1B,OAAO,eAACH,EAAA,EAAD,WACP,gDACA,cAACI,EAAA,EAAD,CAAQC,QANR,WCAG,IAA6BC,EDC5BH,GCD4BG,EDCHC,GCAhBC,KAAKC,MAAMD,KAAKE,SAASJ,EAAMK,WDK5C,0B,0BEUWC,MAdf,WACE,MAAoCC,mBAAeN,EAAM,IAAzD,mBAAOO,EAAP,KAAmBC,EAAnB,KAEA,OACE,cAACC,EAAA,EAAD,CAAWC,UAAU,MAArB,SACE,eAACC,EAAA,EAAD,WACA,cAAChB,EAAD,CAAcC,QAASY,IACvB,cAACjB,EAAD,CAAYC,KAAOe,UCFVK,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.b9053412.chunk.js","sourcesContent":["import { Col } from \"react-bootstrap\";\nimport { Card } from \"../interface/card\";\n\nexport function CardViewer({card}: {card: Card}) : JSX.Element{\n    return <Col>\n    <h1>Card Viewer </h1>\n    <div>Card Question {card.Question}</div>\n    </Col>\n}","import {Button, Col} from \"react-bootstrap\";\nimport { Card } from \"../interface/card\";\nimport CARDS from '../assets/cards.json';\nimport { getRandomElement } from \"../utilities/data\";\n\n\nexport function ControlPanel({setCard}: {setCard: (c: Card)=>void}) : JSX.Element{\n    function setRandomCard(){\n        setCard(getRandomElement(CARDS as Card[]))\n    }\n\n    return <Col>\n    <h1>Control Panel </h1>\n    <Button onClick = {setRandomCard}>Swap Card</Button> \n    </Col>\n}","// https://stackoverflow.com/a/5915122/1718155\n/** *\n* take a random element from a list\n* @para items any kind of list\n* @returns one randomly chosen element\n*/\n\nexport function getRandomElement<T>(items: T[]): T {\n    return items[Math.floor(Math.random()*items.length)];\n}","import React, { useState } from 'react';\nimport './App.css';\nimport CARDS from './assets/cards.json';\nimport { CardViewer } from './components/CardViewer';\nimport { ControlPanel } from './components/ControlPanel';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container, Row } from 'react-bootstrap';\nimport {Card} from './interface/card'\n\nfunction App(): JSX.Element{\n  const [activeCard, setActiveCard] = useState<Card>(CARDS[0] as Card);\n\n  return (\n    <Container className=\"App\">\n      <Row>\n      <ControlPanel setCard={setActiveCard}></ControlPanel>\n      <CardViewer card= {activeCard}></CardViewer>\n      </Row>\n    </Container>\n    \n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}