{"version":3,"sources":["Intro/Prompt.tsx","Intro/SwapButton.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Prompt","text","SwapButton","props","useState","active","setActive","onClick","change","App","prompt","setPrompt","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMAGaA,EAAQ,SAAC,GAAwC,IAAvCC,EAAsC,EAAtCA,KACnB,OAAO,oCAAOA,EAAP,QCDEC,EAAa,SAACC,GACvB,MAA4BC,oBAAkB,GAA9C,mBAAOC,EAAP,KAAeC,EAAf,KAaA,OAAO,wBAAQC,QAAW,kBAVlBF,EACAF,EAAMK,OAAO,gBAGbL,EAAMK,OAAO,qBAEjBF,GAAWD,IAIR,mBCIII,MAhBf,WACE,MAA2BL,mBAAiB,qBAA5C,mBAAOM,EAAP,KAAeC,EAAf,KAMA,OACE,sBAAKC,UAAU,MAAf,UACE,cAAC,EAAD,CAAQX,KAAQS,IAChB,cAAC,EAAD,CAAYF,OAAQG,QCDXE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.f5db82d7.chunk.js","sourcesContent":["\n\n\nexport const Prompt =({text}: {text: string}):JSX.Element => {\n    return <div> {text} </div>\n}","import { useState } from \"react\";\n\n\nexport const SwapButton = (props: {change: (text: string) => void }): JSX.Element=> {\n    const [active, setActive] = useState<Boolean>(true);\n\n    const swapper = () => {\n        if (active){\n            props.change(\"Old prompts!\");\n        }\n        else{\n            props.change(\"New prompts!\");\n        }\n        setActive(!active);\n    }\n\n\n    return <button onClick = {() => swapper()}>Swap</button>\n}","import React, { useState } from 'react';\nimport './App.css';\nimport { Prompt } from './Intro/Prompt';\nimport { SwapButton } from './Intro/SwapButton';\n\nfunction App(): JSX.Element{\n  const [prompt, setPrompt] =useState<string>(\"Hello and Welcome\");\n\n  /*useEffect(() => {\n    setPrompt(\"Hello world actual\")\n  })*/\n\n  return (\n    <div className=\"App\">\n      <Prompt text = {prompt}></Prompt>\n      <SwapButton change={setPrompt}></SwapButton>\n    </div>\n    \n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}